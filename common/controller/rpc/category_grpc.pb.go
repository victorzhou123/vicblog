// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.17.3
// source: category.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CategoryService_AddCategory_FullMethodName                       = "/category.CategoryService/AddCategory"
	CategoryService_ListCategoryByPagination_FullMethodName          = "/category.CategoryService/ListCategoryByPagination"
	CategoryService_ListCategories_FullMethodName                    = "/category.CategoryService/ListCategories"
	CategoryService_GetArticleCategory_FullMethodName                = "/category.CategoryService/GetArticleCategory"
	CategoryService_GetTotalNumberOfCategories_FullMethodName        = "/category.CategoryService/GetTotalNumberOfCategories"
	CategoryService_DelCategory_FullMethodName                       = "/category.CategoryService/DelCategory"
	CategoryService_GetRelationWithArticle_FullMethodName            = "/category.CategoryService/GetRelationWithArticle"
	CategoryService_GetRelatedArticleIdsThroughCateId_FullMethodName = "/category.CategoryService/GetRelatedArticleIdsThroughCateId"
	CategoryService_BuildRelationWithArticle_FullMethodName          = "/category.CategoryService/BuildRelationWithArticle"
	CategoryService_RemoveRelationWithArticle_FullMethodName         = "/category.CategoryService/RemoveRelationWithArticle"
)

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryServiceClient interface {
	AddCategory(ctx context.Context, in *CategoryName, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListCategoryByPagination(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*CategoryList, error)
	ListCategories(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*CategoriesWithRelatedArticleAmount, error)
	GetArticleCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Category, error)
	GetTotalNumberOfCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Amount, error)
	DelCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRelationWithArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	GetRelatedArticleIdsThroughCateId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RespGetRelatedArticleIdsThroughCateId, error)
	BuildRelationWithArticle(ctx context.Context, in *ReqBuildRelationWithArticle, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveRelationWithArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type categoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryServiceClient(cc grpc.ClientConnInterface) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) AddCategory(ctx context.Context, in *CategoryName, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CategoryService_AddCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) ListCategoryByPagination(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*CategoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryList)
	err := c.cc.Invoke(ctx, CategoryService_ListCategoryByPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) ListCategories(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*CategoriesWithRelatedArticleAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoriesWithRelatedArticleAmount)
	err := c.cc.Invoke(ctx, CategoryService_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetArticleCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, CategoryService_GetArticleCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetTotalNumberOfCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Amount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Amount)
	err := c.cc.Invoke(ctx, CategoryService_GetTotalNumberOfCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) DelCategory(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CategoryService_DelCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetRelationWithArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, CategoryService_GetRelationWithArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetRelatedArticleIdsThroughCateId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RespGetRelatedArticleIdsThroughCateId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespGetRelatedArticleIdsThroughCateId)
	err := c.cc.Invoke(ctx, CategoryService_GetRelatedArticleIdsThroughCateId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) BuildRelationWithArticle(ctx context.Context, in *ReqBuildRelationWithArticle, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CategoryService_BuildRelationWithArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) RemoveRelationWithArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CategoryService_RemoveRelationWithArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServiceServer is the server API for CategoryService service.
// All implementations must embed UnimplementedCategoryServiceServer
// for forward compatibility.
type CategoryServiceServer interface {
	AddCategory(context.Context, *CategoryName) (*emptypb.Empty, error)
	ListCategoryByPagination(context.Context, *Pagination) (*CategoryList, error)
	ListCategories(context.Context, *Amount) (*CategoriesWithRelatedArticleAmount, error)
	GetArticleCategory(context.Context, *Id) (*Category, error)
	GetTotalNumberOfCategories(context.Context, *emptypb.Empty) (*Amount, error)
	DelCategory(context.Context, *Id) (*emptypb.Empty, error)
	GetRelationWithArticle(context.Context, *Id) (*Id, error)
	GetRelatedArticleIdsThroughCateId(context.Context, *Id) (*RespGetRelatedArticleIdsThroughCateId, error)
	BuildRelationWithArticle(context.Context, *ReqBuildRelationWithArticle) (*emptypb.Empty, error)
	RemoveRelationWithArticle(context.Context, *Id) (*emptypb.Empty, error)
	mustEmbedUnimplementedCategoryServiceServer()
}

// UnimplementedCategoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoryServiceServer struct{}

func (UnimplementedCategoryServiceServer) AddCategory(context.Context, *CategoryName) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedCategoryServiceServer) ListCategoryByPagination(context.Context, *Pagination) (*CategoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategoryByPagination not implemented")
}
func (UnimplementedCategoryServiceServer) ListCategories(context.Context, *Amount) (*CategoriesWithRelatedArticleAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedCategoryServiceServer) GetArticleCategory(context.Context, *Id) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleCategory not implemented")
}
func (UnimplementedCategoryServiceServer) GetTotalNumberOfCategories(context.Context, *emptypb.Empty) (*Amount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalNumberOfCategories not implemented")
}
func (UnimplementedCategoryServiceServer) DelCategory(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCategory not implemented")
}
func (UnimplementedCategoryServiceServer) GetRelationWithArticle(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationWithArticle not implemented")
}
func (UnimplementedCategoryServiceServer) GetRelatedArticleIdsThroughCateId(context.Context, *Id) (*RespGetRelatedArticleIdsThroughCateId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedArticleIdsThroughCateId not implemented")
}
func (UnimplementedCategoryServiceServer) BuildRelationWithArticle(context.Context, *ReqBuildRelationWithArticle) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRelationWithArticle not implemented")
}
func (UnimplementedCategoryServiceServer) RemoveRelationWithArticle(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRelationWithArticle not implemented")
}
func (UnimplementedCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {}
func (UnimplementedCategoryServiceServer) testEmbeddedByValue()                         {}

// UnsafeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServiceServer will
// result in compilation errors.
type UnsafeCategoryServiceServer interface {
	mustEmbedUnimplementedCategoryServiceServer()
}

func RegisterCategoryServiceServer(s grpc.ServiceRegistrar, srv CategoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedCategoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoryService_ServiceDesc, srv)
}

func _CategoryService_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_AddCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).AddCategory(ctx, req.(*CategoryName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_ListCategoryByPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).ListCategoryByPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_ListCategoryByPagination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).ListCategoryByPagination(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).ListCategories(ctx, req.(*Amount))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_GetArticleCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetArticleCategory(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetTotalNumberOfCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetTotalNumberOfCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_GetTotalNumberOfCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetTotalNumberOfCategories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_DelCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).DelCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_DelCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).DelCategory(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetRelationWithArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetRelationWithArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_GetRelationWithArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetRelationWithArticle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetRelatedArticleIdsThroughCateId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetRelatedArticleIdsThroughCateId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_GetRelatedArticleIdsThroughCateId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetRelatedArticleIdsThroughCateId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_BuildRelationWithArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuildRelationWithArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).BuildRelationWithArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_BuildRelationWithArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).BuildRelationWithArticle(ctx, req.(*ReqBuildRelationWithArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_RemoveRelationWithArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).RemoveRelationWithArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_RemoveRelationWithArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).RemoveRelationWithArticle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryService_ServiceDesc is the grpc.ServiceDesc for CategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "category.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCategory",
			Handler:    _CategoryService_AddCategory_Handler,
		},
		{
			MethodName: "ListCategoryByPagination",
			Handler:    _CategoryService_ListCategoryByPagination_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _CategoryService_ListCategories_Handler,
		},
		{
			MethodName: "GetArticleCategory",
			Handler:    _CategoryService_GetArticleCategory_Handler,
		},
		{
			MethodName: "GetTotalNumberOfCategories",
			Handler:    _CategoryService_GetTotalNumberOfCategories_Handler,
		},
		{
			MethodName: "DelCategory",
			Handler:    _CategoryService_DelCategory_Handler,
		},
		{
			MethodName: "GetRelationWithArticle",
			Handler:    _CategoryService_GetRelationWithArticle_Handler,
		},
		{
			MethodName: "GetRelatedArticleIdsThroughCateId",
			Handler:    _CategoryService_GetRelatedArticleIdsThroughCateId_Handler,
		},
		{
			MethodName: "BuildRelationWithArticle",
			Handler:    _CategoryService_BuildRelationWithArticle_Handler,
		},
		{
			MethodName: "RemoveRelationWithArticle",
			Handler:    _CategoryService_RemoveRelationWithArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category.proto",
}
