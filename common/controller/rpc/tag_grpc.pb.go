// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.17.3
// source: tag.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TagService_AddTags_FullMethodName                          = "/tag.TagService/AddTags"
	TagService_ListTagByPagination_FullMethodName              = "/tag.TagService/ListTagByPagination"
	TagService_ListTags_FullMethodName                         = "/tag.TagService/ListTags"
	TagService_GetArticleTag_FullMethodName                    = "/tag.TagService/GetArticleTag"
	TagService_GetTotalNumberOfTags_FullMethodName             = "/tag.TagService/GetTotalNumberOfTags"
	TagService_Delete_FullMethodName                           = "/tag.TagService/Delete"
	TagService_GetRelationWithArticle_FullMethodName           = "/tag.TagService/GetRelationWithArticle"
	TagService_GetRelatedArticleIdsThroughTagId_FullMethodName = "/tag.TagService/GetRelatedArticleIdsThroughTagId"
	TagService_BuildRelationWithArticle_FullMethodName         = "/tag.TagService/BuildRelationWithArticle"
	TagService_RemoveRelationWithArticle_FullMethodName        = "/tag.TagService/RemoveRelationWithArticle"
)

// TagServiceClient is the client API for TagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagServiceClient interface {
	AddTags(ctx context.Context, in *TagNames, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTagByPagination(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*TagList, error)
	ListTags(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*TagsWithRelatedArticleAmount, error)
	GetArticleTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tags, error)
	GetTotalNumberOfTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Amount, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRelationWithArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error)
	GetRelatedArticleIdsThroughTagId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error)
	BuildRelationWithArticle(ctx context.Context, in *ArticleIdAndTagIds, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveRelationWithArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagServiceClient(cc grpc.ClientConnInterface) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) AddTags(ctx context.Context, in *TagNames, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TagService_AddTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) ListTagByPagination(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*TagList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagList)
	err := c.cc.Invoke(ctx, TagService_ListTagByPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) ListTags(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*TagsWithRelatedArticleAmount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagsWithRelatedArticleAmount)
	err := c.cc.Invoke(ctx, TagService_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetArticleTag(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Tags, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tags)
	err := c.cc.Invoke(ctx, TagService_GetArticleTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetTotalNumberOfTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Amount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Amount)
	err := c.cc.Invoke(ctx, TagService_GetTotalNumberOfTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TagService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetRelationWithArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ids)
	err := c.cc.Invoke(ctx, TagService_GetRelationWithArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetRelatedArticleIdsThroughTagId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ids)
	err := c.cc.Invoke(ctx, TagService_GetRelatedArticleIdsThroughTagId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) BuildRelationWithArticle(ctx context.Context, in *ArticleIdAndTagIds, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TagService_BuildRelationWithArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) RemoveRelationWithArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TagService_RemoveRelationWithArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServiceServer is the server API for TagService service.
// All implementations should embed UnimplementedTagServiceServer
// for forward compatibility.
type TagServiceServer interface {
	AddTags(context.Context, *TagNames) (*emptypb.Empty, error)
	ListTagByPagination(context.Context, *Pagination) (*TagList, error)
	ListTags(context.Context, *Amount) (*TagsWithRelatedArticleAmount, error)
	GetArticleTag(context.Context, *Id) (*Tags, error)
	GetTotalNumberOfTags(context.Context, *emptypb.Empty) (*Amount, error)
	Delete(context.Context, *Id) (*emptypb.Empty, error)
	GetRelationWithArticle(context.Context, *Id) (*Ids, error)
	GetRelatedArticleIdsThroughTagId(context.Context, *Id) (*Ids, error)
	BuildRelationWithArticle(context.Context, *ArticleIdAndTagIds) (*emptypb.Empty, error)
	RemoveRelationWithArticle(context.Context, *Id) (*emptypb.Empty, error)
}

// UnimplementedTagServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTagServiceServer struct{}

func (UnimplementedTagServiceServer) AddTags(context.Context, *TagNames) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTags not implemented")
}
func (UnimplementedTagServiceServer) ListTagByPagination(context.Context, *Pagination) (*TagList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTagByPagination not implemented")
}
func (UnimplementedTagServiceServer) ListTags(context.Context, *Amount) (*TagsWithRelatedArticleAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedTagServiceServer) GetArticleTag(context.Context, *Id) (*Tags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleTag not implemented")
}
func (UnimplementedTagServiceServer) GetTotalNumberOfTags(context.Context, *emptypb.Empty) (*Amount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalNumberOfTags not implemented")
}
func (UnimplementedTagServiceServer) Delete(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTagServiceServer) GetRelationWithArticle(context.Context, *Id) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationWithArticle not implemented")
}
func (UnimplementedTagServiceServer) GetRelatedArticleIdsThroughTagId(context.Context, *Id) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedArticleIdsThroughTagId not implemented")
}
func (UnimplementedTagServiceServer) BuildRelationWithArticle(context.Context, *ArticleIdAndTagIds) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRelationWithArticle not implemented")
}
func (UnimplementedTagServiceServer) RemoveRelationWithArticle(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRelationWithArticle not implemented")
}
func (UnimplementedTagServiceServer) testEmbeddedByValue() {}

// UnsafeTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServiceServer will
// result in compilation errors.
type UnsafeTagServiceServer interface {
	mustEmbedUnimplementedTagServiceServer()
}

func RegisterTagServiceServer(s grpc.ServiceRegistrar, srv TagServiceServer) {
	// If the following call pancis, it indicates UnimplementedTagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TagService_ServiceDesc, srv)
}

func _TagService_AddTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).AddTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_AddTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).AddTags(ctx, req.(*TagNames))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_ListTagByPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).ListTagByPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_ListTagByPagination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).ListTagByPagination(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).ListTags(ctx, req.(*Amount))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetArticleTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetArticleTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetArticleTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetArticleTag(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetTotalNumberOfTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetTotalNumberOfTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetTotalNumberOfTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetTotalNumberOfTags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetRelationWithArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetRelationWithArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetRelationWithArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetRelationWithArticle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetRelatedArticleIdsThroughTagId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetRelatedArticleIdsThroughTagId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetRelatedArticleIdsThroughTagId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetRelatedArticleIdsThroughTagId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_BuildRelationWithArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleIdAndTagIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).BuildRelationWithArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_BuildRelationWithArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).BuildRelationWithArticle(ctx, req.(*ArticleIdAndTagIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_RemoveRelationWithArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).RemoveRelationWithArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_RemoveRelationWithArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).RemoveRelationWithArticle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// TagService_ServiceDesc is the grpc.ServiceDesc for TagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tag.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTags",
			Handler:    _TagService_AddTags_Handler,
		},
		{
			MethodName: "ListTagByPagination",
			Handler:    _TagService_ListTagByPagination_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _TagService_ListTags_Handler,
		},
		{
			MethodName: "GetArticleTag",
			Handler:    _TagService_GetArticleTag_Handler,
		},
		{
			MethodName: "GetTotalNumberOfTags",
			Handler:    _TagService_GetTotalNumberOfTags_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TagService_Delete_Handler,
		},
		{
			MethodName: "GetRelationWithArticle",
			Handler:    _TagService_GetRelationWithArticle_Handler,
		},
		{
			MethodName: "GetRelatedArticleIdsThroughTagId",
			Handler:    _TagService_GetRelatedArticleIdsThroughTagId_Handler,
		},
		{
			MethodName: "BuildRelationWithArticle",
			Handler:    _TagService_BuildRelationWithArticle_Handler,
		},
		{
			MethodName: "RemoveRelationWithArticle",
			Handler:    _TagService_RemoveRelationWithArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tag.proto",
}
